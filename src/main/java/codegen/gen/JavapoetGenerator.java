package codegen.gen;

import java.io.IOException;
import java.nio.file.Paths;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import javax.lang.model.element.Modifier;

import org.apache.commons.lang3.StringUtils;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import org.apache.maven.plugin.MojoExecutionException;

import com.squareup.javapoet.AnnotationSpec;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.CodeBlock;
import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.ParameterSpec;
import com.squareup.javapoet.TypeName;
import com.squareup.javapoet.TypeSpec;
import com.squareup.javapoet.TypeSpec.Builder;

import codegen.config.ConfigProperties;
import codegen.table.Table;
import codegen.table.TableColumn;
import edu.emory.mathcs.backport.java.util.Arrays;

/**
 *
 *
 * @author: baotingyu
 * @date: 2023/6/25
 **/
public class JavapoetGenerator extends AbstractCodeGenerator{


    @Override
    public void generate(ConfigProperties configProperties,Set<Table> tables) throws MojoExecutionException {


        if(StringUtils.isBlank(configProperties.getEntityGenPkg()) ||
                StringUtils.isBlank(configProperties.getMapperInterfaceGenPkg()) ||
                StringUtils.isBlank(configProperties.getMapperXmlGenAbsPath()) ){
            throw  new MojoExecutionException("EntityGenPkg or MapperInterfaceGenPkg or MapperXmlGenAbsPath blank");
        }
        this.configProperties = configProperties;
        Map<String, TypeSpec> entityClassSpecs = generateEntity(tables);
        generateMapperInterface(tables,entityClassSpecs);

    }

    public void generateMapperInterface(Set<Table> tables,Map<String, TypeSpec> entityClassSpecs) throws MojoExecutionException {
        String absolutePathFromPkg = getAbsolutePathForPkg(this.configProperties.getBaseDir(), configProperties.getMapperInterfaceGenPkg());
        prepareDir(absolutePathFromPkg);

        Map<String, TypeSpec> typeSpecs = buildMapperInterface(tables,entityClassSpecs);

        typeSpecs.values().forEach(ts-> {
            JavaFile file = JavaFile.builder(this.configProperties.getMapperInterfaceGenPkg(), ts).build();
            try {
                file.writeTo(Paths.get(getAbsolutePathForSrcMainJava(this.configProperties.getBaseDir())));
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        });

    }

    private Map<String, TypeSpec> buildMapperInterface(Set<Table> tables,Map<String, TypeSpec> entityClassSpecs){
        Map<String,TypeSpec> entities = new HashMap<>();
        tables.forEach(t->{
            String simpleClassName = mapUnderScoreToUpperCamelCase(t.getName());
            entities.putAll(buildMapperInterfaceForTable(t,entityClassSpecs.get(simpleClassName)));
        });
        return entities;
    }


    private Map<String, TypeSpec> buildMapperInterfaceForTable(Table table,TypeSpec entityClassSpec){
        String interfaceName = entityClassSpec.name + "Mapper";

        Builder interfaceBuilder = TypeSpec.interfaceBuilder(interfaceName)
                .addModifiers(Modifier.PUBLIC)
                .addAnnotation(Mapper.class)
                .addJavadoc("auto generated by codegen-maven-plugin");

        TableColumn primaryKeyColumn = table.getPrimaryKeyColumn();
        String primaryKeyColumnName = primaryKeyColumn.getColumnName();

        ClassName entityClassName = ClassName.get(this.configProperties.getEntityGenPkg(), entityClassSpec.name);
        ParameterSpec entityParameterSpec =
                ParameterSpec.builder(entityClassName, mapUnderScoreToLowerCamelCase(table.getName()))
                        .addAnnotation(
                                AnnotationSpec.builder(Param.class).addMember("value","\""+mapUnderScoreToLowerCamelCase(table.getName())+"\"").build()
                        )
                        .build();

        ParameterSpec primaryKeyParameterSpec =
                ParameterSpec.builder(convertJDBCTypetoClass(primaryKeyColumn.getDataType()), mapUnderScoreToLowerCamelCase(primaryKeyColumnName))
                        .addAnnotation(
                                AnnotationSpec.builder(Param.class).addMember("value","\""+mapUnderScoreToLowerCamelCase(primaryKeyColumnName)+"\"").build()
                        )
                        .build();

        MethodSpec insert = MethodSpec.methodBuilder("insert" + entityClassSpec.name)
                .addModifiers(Modifier.PUBLIC, Modifier.ABSTRACT)
                .addParameter(entityParameterSpec)
                .build();

        MethodSpec updateByPrimaryKey = MethodSpec.methodBuilder("update" + entityClassSpec.name+"By"+mapUnderScoreToUpperCamelCase(primaryKeyColumnName))
                .addModifiers(Modifier.PUBLIC, Modifier.ABSTRACT)
                .addParameter(primaryKeyParameterSpec)
                .addParameter(entityParameterSpec)
                .build();

        MethodSpec select = MethodSpec.methodBuilder("select" + entityClassSpec.name)
                .addModifiers(Modifier.PUBLIC, Modifier.ABSTRACT)
                .addParameter(entityParameterSpec)
                .build();

        MethodSpec deleteByPrimaryKey = MethodSpec.methodBuilder("delete" + entityClassSpec.name+"By"+mapUnderScoreToUpperCamelCase(primaryKeyColumnName))
                .addModifiers(Modifier.PUBLIC, Modifier.ABSTRACT)
                .addParameter(primaryKeyParameterSpec)
                .build();

        interfaceBuilder.addMethod(insert);
        interfaceBuilder.addMethod(updateByPrimaryKey);
        interfaceBuilder.addMethod(select);
        interfaceBuilder.addMethod(deleteByPrimaryKey);

        TypeSpec interfaceSpec = interfaceBuilder.build();
        return Collections.singletonMap(interfaceName,interfaceSpec);
    }


    /**
     * simpleClassName:TypeSpec
     */
    public Map<String, TypeSpec>  generateEntity(Set<Table> tables) throws MojoExecutionException {

        String absolutePathFromPkg = getAbsolutePathForPkg(this.configProperties.getBaseDir(), this.configProperties.getEntityGenPkg());
        prepareDir(absolutePathFromPkg);

        Map<String, TypeSpec> typeSpecs = buildEntity(tables);
        typeSpecs.values().forEach(ts-> {
            JavaFile file = JavaFile.builder(this.configProperties.getEntityGenPkg(), ts).build();
            try {
                file.writeTo(Paths.get(getAbsolutePathForSrcMainJava(this.configProperties.getBaseDir())));
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        });
        return typeSpecs;
    }

    private Map<String,TypeSpec> buildEntity(Set<Table> tables) {
        Map<String,TypeSpec> entities = new HashMap<>();
        tables.forEach(t->entities.putAll(buildEntityForTable(t)));
        return entities;
    }

    private Map<String,TypeSpec> buildEntityForTable(Table table){
        String simpleClassName = mapUnderScoreToUpperCamelCase(table.getName());
        Builder builder = TypeSpec
                .classBuilder(simpleClassName)
                .addModifiers(Modifier.PUBLIC)
                .addJavadoc("auto generated by codegen-maven-plugin");

        Set<FieldSpec> fieldSpecs = new HashSet<>();
        Set<MethodSpec> getters = new HashSet<>();
        Set<MethodSpec> setters = new HashSet<>();

        Set<TableColumn> columns = table.getColumns();
        for (TableColumn column : columns) {

            String fieldName = mapUnderScoreToLowerCamelCase(column.getColumnName());
            Class<?> fieldJavaType = convertJDBCTypetoClass(column.getDataType());
            FieldSpec build = FieldSpec.builder(fieldJavaType, fieldName, Modifier.PRIVATE)
                    .addJavadoc(CodeBlock.of("size:"+column.getColumnSize()+",nullable:"+column.isNullable()+",autoIncrement:"+column.isAutoIncrement()))
                    .build();
            fieldSpecs.add(build);

            MethodSpec getter = MethodSpec.methodBuilder(getterMethodNameFromColumnName(column.getColumnName()))
                    .addModifiers(Modifier.PUBLIC).returns(fieldJavaType)
                    .addStatement("return this."+fieldName)
                    .build();
            getters.add(getter);

            MethodSpec setter = MethodSpec.methodBuilder(setterMethodNameFromColumnName(column.getColumnName()))
                    .addModifiers(Modifier.PUBLIC).returns(TypeName.VOID)
                    .addParameter(fieldJavaType, fieldName)
                    .addStatement("this." + fieldName+" = "+fieldName)
                    .build();
            setters.add(setter);
        }
        builder.addFields(fieldSpecs);
        builder.addMethods(getters);
        builder.addMethods(setters);
        return Collections.singletonMap(simpleClassName,builder.build());
    }
}
